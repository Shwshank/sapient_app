{"version":3,"sources":["components/Filter.jsx","service/ApiService.js","components/DisplayAssets.jsx","App.js","serviceWorker.js","index.js"],"names":["Filter","yearAndStatus","name","selected","successfulLaunchStatus","successfulLandingStatus","useState","year","landing","launch","urlParams","setUrlParams","yearButtons","setYearButtons","launchButtons","setlaunchButtons","landingButtons","setLandingButtons","history","useHistory","updateQueryParams","key","value","tempUrl","replace","Object","values","join","className","map","button","index","type","onClick","e","preventDefault","buttonStatus","tempYearAndStatus","toggleYearButton","tempLaunchStatus","toggleLaunchButton","tempLandingStatus","toggleLandingButton","baseUrl","getData","a","filters","fetch","method","mode","response","json","DisplayAssets","useParams","spaceData","setSpaceData","queryParams","setQueryParams","refreshFlag","setRefreshFlag","dataNotAval","setDataNotAval","useEffect","temp","tempQuery","Service","then","length","style","marginTop","data","flight_number","src","links","mission_patch_small","alt","mission_name","textAlign","youtube_id","launch_year","toString","launch_success","rocket","first_stage","cores","land_success","disabled","role","aria-hidden","App","data-test","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84f7a5e1.chunk.js","sourcesContent":["import React ,{useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Filter =()=>{\r\n\r\n  /*\r\n  *\r\n  * Initialize\r\n  *\r\n  */\r\n\r\n  const yearAndStatus = [\r\n    {name: '2006', selected: false},\r\n    {name: '2007', selected: false},\r\n    {name: '2008', selected: false},\r\n    {name: '2009', selected: false},\r\n    {name: '2010', selected: false},\r\n    {name: '2011', selected: false},\r\n    {name: '2012', selected: false},\r\n    {name: '2013', selected: false},\r\n    {name: '2014', selected: false},\r\n    {name: '2015', selected: false},\r\n    {name: '2016', selected: false},\r\n    {name: '2017', selected: false},\r\n    {name: '2018', selected: false},\r\n    {name: '2019', selected: false},\r\n    {name: '2020', selected: false},\r\n  ]\r\n\r\n  const successfulLaunchStatus = [\r\n    {name: 'True', selected: false},\r\n    {name: 'False', selected: false},\r\n  ]\r\n\r\n  const successfulLandingStatus = [\r\n    {name: 'True', selected: false},\r\n    {name: 'False', selected: false},\r\n  ]\r\n\r\n  const params = {\r\n    year: '/notSelected',\r\n    landing: '/notSelected',\r\n    launch: '/notSelected',\r\n  }\r\n\r\n  /*\r\n  *\r\n  * Set States\r\n  *\r\n  */\r\n\r\n  const [urlParams, setUrlParams] = useState(params);\r\n  const [yearButtons, setYearButtons] = useState([...yearAndStatus])\r\n  const [launchButtons, setlaunchButtons] = useState([...successfulLaunchStatus])\r\n  const [landingButtons, setLandingButtons] = useState([...successfulLandingStatus])\r\n  const history = useHistory();\r\n\r\n  /*\r\n  *\r\n  * Toggle year button actoin\r\n  *\r\n  */\r\n\r\n  const toggleYearButton = (buttonStatus, index) =>{\r\n    let tempYearAndStatus = [...yearAndStatus];\r\n    tempYearAndStatus[index] = {...buttonStatus, selected:!buttonStatus.selected}\r\n    setYearButtons([...tempYearAndStatus])\r\n    if(!buttonStatus.selected){\r\n      updateQueryParams('year', '/'+buttonStatus.name)\r\n    } else {\r\n      updateQueryParams('year', '/notSelected')\r\n    }\r\n  }\r\n\r\n  /*\r\n  *\r\n  * Toggle launch button\r\n  *\r\n  */\r\n\r\n  const toggleLaunchButton = (buttonStatus, index) =>{\r\n    let tempLaunchStatus = [...successfulLaunchStatus];\r\n    tempLaunchStatus[index] = {...buttonStatus, selected:!buttonStatus.selected}\r\n    setlaunchButtons([...tempLaunchStatus])\r\n    if(!buttonStatus.selected){\r\n      updateQueryParams('launch', '/'+buttonStatus.name)\r\n    } else {\r\n      updateQueryParams('launch', '/notSelected')\r\n    }\r\n  }\r\n\r\n  /*\r\n  *\r\n  * Toggle landind button\r\n  *\r\n  */\r\n\r\n  const toggleLandingButton = (buttonStatus, index) =>{\r\n    let tempLandingStatus = [...successfulLandingStatus];\r\n    tempLandingStatus[index] = {...buttonStatus, selected:!buttonStatus.selected}\r\n    setLandingButtons([...tempLandingStatus])\r\n    if(!buttonStatus.selected){\r\n      updateQueryParams('landing', '/'+buttonStatus.name)\r\n    } else {\r\n      updateQueryParams('landing', '/notSelected')\r\n    }\r\n  }\r\n\r\n  /*\r\n  *\r\n  * Navigation and state update, for all buttons\r\n  *\r\n  */\r\n\r\n  const updateQueryParams = (key, value) =>{\r\n    let tempUrl = {...urlParams}\r\n    tempUrl[key] = value\r\n    history.replace(Object.values(tempUrl).join(''))\r\n    setUrlParams(tempUrl)\r\n  }\r\n\r\n  return (\r\n    <div className='col-lg-2 col-sm-12 ' >\r\n      <div className='filterBox'>\r\n        <p> <b> Filters </b> </p>\r\n        <p>Launch Year</p>\r\n        <hr/>\r\n        {\r\n          yearButtons.map((button, index)=>{\r\n            return(\r\n              <button type=\"button\"\r\n              className={button.selected? 'btn btn-success btnSelectedColor' : 'btn btn-success notSelected'}\r\n              key={button.name}\r\n              onClick={e=>{\r\n                e.preventDefault();\r\n                toggleYearButton(button,index);\r\n              }}\r\n              >{button.name}</button>\r\n            )\r\n          })\r\n        }\r\n\r\n        <p>Successful Launch</p>\r\n        <hr/>\r\n        {\r\n          launchButtons.map((button, index)=>{\r\n            return(\r\n              <button type=\"button\"\r\n              className={button.selected? 'btn btn-success btnSelectedColor' : 'btn btn-success notSelected'}\r\n              key={button.name}\r\n              onClick={e=>{\r\n                e.preventDefault();\r\n                toggleLaunchButton(button,index);\r\n              }}\r\n              >{button.name}</button>\r\n            )\r\n          })\r\n        }\r\n\r\n        <p>Successful Landing</p>\r\n        <hr/>\r\n        {\r\n          landingButtons.map((button, index)=>{\r\n            return(\r\n              <button type=\"button\"\r\n              className={button.selected? 'btn btn-success btnSelectedColor' : 'btn btn-success notSelected'}\r\n              key={button.name}\r\n              onClick={e=>{\r\n                e.preventDefault();\r\n                toggleLandingButton(button,index);\r\n              }}\r\n              >{button.name}</button>\r\n            )\r\n          })\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter;\r\n","const baseUrl = 'https://api.spacexdata.com/v3/launches?limit=100';\r\n\r\nexport const getData = async (filters='')=>{\r\n  let response = await fetch(baseUrl+filters,{\r\n    method: 'GET',\r\n    mode: 'cors',\r\n  });\r\n  return response.json();\r\n}\r\n","/*eslint-disable*/\r\nimport React, {useEffect, useState} from 'react';\r\nimport * as Service from '../service/ApiService';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nconst DisplayAssets =()=>{\r\n\r\n  /*\r\n  *\r\n  * Initialize\r\n  *\r\n  */\r\n  let { launch, landing, year } = useParams();\r\n  const [spaceData, setSpaceData] = useState([])\r\n  const [queryParams, setQueryParams ] = useState({year:'', launch:'', landing:''})\r\n  const [refreshFlag, setRefreshFlag] = useState('flag')\r\n  const [dataNotAval, setDataNotAval] = useState(false)\r\n\r\n  /*\r\n  *\r\n  * Get params and update get object\r\n  *\r\n  */\r\n\r\n  useEffect(()=>{\r\n    let temp = {...queryParams}\r\n\r\n    // Get year data\r\n    if(year)\r\n    if(year === 'notSelected'){\r\n      temp.year = '';\r\n    } else {\r\n      temp.year = '&launch_year='+year;\r\n    }\r\n\r\n    // Get launch data\r\n    if(launch)\r\n    if(launch !== 'notSelected'){\r\n      if(launch === 'True'){\r\n        temp.launch = '&launch_success=true'\r\n      } else {\r\n        temp.launch = '&launch_success=false';\r\n      }\r\n    } else {\r\n      temp.launch = '';\r\n    }\r\n\r\n    // Get landing data\r\n    if(landing)\r\n    if(landing !== 'notSelected'){\r\n      if(landing === 'True'){\r\n        temp.landing = '&land_success=true'\r\n      } else {\r\n        temp.landing = '&land_success=false';\r\n      }\r\n    } else {\r\n      temp.landing = '';\r\n    }\r\n\r\n    // update object as per params received\r\n    setQueryParams(temp)\r\n  },[year, landing, launch]);\r\n\r\n  /*\r\n  *\r\n  * convert obj values to an array\r\n  *\r\n  */\r\n\r\n  useEffect(()=>{\r\n    let tempQuery = Object.values(queryParams).join('')\r\n    getData(tempQuery);\r\n  }, [queryParams])\r\n\r\n  /*\r\n  *\r\n  * set http request url\r\n  *\r\n  */\r\n\r\n  const getData = (tempQuery='') =>{\r\n\r\n    // refreshFlag is last recent http url send to server\r\n    if(tempQuery!==refreshFlag){\r\n      // if last url and current are not same then only make http call\r\n\r\n      setSpaceData([])\r\n      setDataNotAval(false)\r\n      Service.getData(tempQuery).then(response=>{\r\n        if(response.length){\r\n          setSpaceData(response);\r\n        } else {\r\n          setDataNotAval(true)\r\n        }\r\n        // update last http url\r\n        setRefreshFlag(tempQuery)\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='col-lg-10  col-sm-12'>\r\n      <div className='container-fluid'>\r\n        <div className='row justify-content-md-center'>\r\n        {dataNotAval? <h4 style={{marginTop: '100px'}}>Data not available</h4> :\r\n\r\n        spaceData.length>0? spaceData.map(data=>{\r\n\r\n          return(\r\n            <div className=\"card col-lg-3 col-md-5 col-sm-8 displayContainer\" key = {data.flight_number}>\r\n\r\n              <img className=\"card-img-top\" src={data.links.mission_patch_small} alt=\"\"/>\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\"> <b> {data.mission_name} # {data.flight_number} </b> </h5>\r\n                <p style={{textAlign: \"left\"}}><b>Mission Id </b><br/> <b>* </b>{data.links.youtube_id}</p>\r\n\r\n                <div>\r\n                  <div className='cardBoxLeft'> <b> Launch Year </b> </div>\r\n                  <div className='cardBoxRight'>\r\n                  {data.launch_year? data.launch_year.toString() : 'NA'} <br/> &nbsp; </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <div className='cardBoxLeft'><b> Successful launch </b> </div>\r\n                  <div className='cardBoxRight'>\r\n                    {data.launch_success? 'True' : 'False'}<br/> &nbsp;\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <div className='cardBoxLeft'><b> Successful landing </b> </div>\r\n                  <div className='cardBoxRight'>\r\n                    {data?.rocket?.first_stage?.cores[0]?.land_success? 'True' : 'False'}\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n          )\r\n        }):\r\n        <div style={{marginTop: '100px'}}>\r\n          <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n              &nbsp; Loading...\r\n          </button>\r\n        </div>}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DisplayAssets;\r\n","import React from 'react';\nimport './App.css';\n\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Filter from './components/Filter'\nimport DisplayAssets from './components/DisplayAssets'\n\nfunction App() {\n\n  return (\n    <div className='App' data-test=\"appComponent\">\n      <h3>SpaceX launch programs </h3>\n      <div className=\" container\">\n        <div className=\"row justify-content-md-center\">\n          <Filter/>\n            <Switch>\n              <Route exact path='/'>\n                <DisplayAssets/>\n              </Route>\n              <Route path='/:year?/:landing?/:launch?'>\n                <DisplayAssets/>\n              </Route>\n            </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}